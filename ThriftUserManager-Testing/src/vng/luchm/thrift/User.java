/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vng.luchm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-26")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("UserName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASS_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("PassWord", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("Score", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CREATED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("CreatedDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("UpdatedDate", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  public String Id; // required
  public String UserName; // required
  public String PassWord; // required
  public int Score; // required
  public String CreatedDate; // required
  public String UpdatedDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    USER_NAME((short)2, "UserName"),
    PASS_WORD((short)3, "PassWord"),
    SCORE((short)4, "Score"),
    CREATED_DATE((short)5, "CreatedDate"),
    UPDATED_DATE((short)6, "UpdatedDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // PASS_WORD
          return PASS_WORD;
        case 4: // SCORE
          return SCORE;
        case 5: // CREATED_DATE
          return CREATED_DATE;
        case 6: // UPDATED_DATE
          return UPDATED_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCORE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("UserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASS_WORD, new org.apache.thrift.meta_data.FieldMetaData("PassWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("Score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED_DATE, new org.apache.thrift.meta_data.FieldMetaData("CreatedDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATED_DATE, new org.apache.thrift.meta_data.FieldMetaData("UpdatedDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    String Id,
    String UserName,
    String PassWord,
    int Score,
    String CreatedDate,
    String UpdatedDate)
  {
    this();
    this.Id = Id;
    this.UserName = UserName;
    this.PassWord = PassWord;
    this.Score = Score;
    setScoreIsSet(true);
    this.CreatedDate = CreatedDate;
    this.UpdatedDate = UpdatedDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.Id = other.Id;
    }
    if (other.isSetUserName()) {
      this.UserName = other.UserName;
    }
    if (other.isSetPassWord()) {
      this.PassWord = other.PassWord;
    }
    this.Score = other.Score;
    if (other.isSetCreatedDate()) {
      this.CreatedDate = other.CreatedDate;
    }
    if (other.isSetUpdatedDate()) {
      this.UpdatedDate = other.UpdatedDate;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    this.Id = null;
    this.UserName = null;
    this.PassWord = null;
    setScoreIsSet(false);
    this.Score = 0;
    this.CreatedDate = null;
    this.UpdatedDate = null;
  }

  public String getId() {
    return this.Id;
  }

  public User setId(String Id) {
    this.Id = Id;
    return this;
  }

  public void unsetId() {
    this.Id = null;
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.Id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.Id = null;
    }
  }

  public String getUserName() {
    return this.UserName;
  }

  public User setUserName(String UserName) {
    this.UserName = UserName;
    return this;
  }

  public void unsetUserName() {
    this.UserName = null;
  }

  /** Returns true if field UserName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.UserName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.UserName = null;
    }
  }

  public String getPassWord() {
    return this.PassWord;
  }

  public User setPassWord(String PassWord) {
    this.PassWord = PassWord;
    return this;
  }

  public void unsetPassWord() {
    this.PassWord = null;
  }

  /** Returns true if field PassWord is set (has been assigned a value) and false otherwise */
  public boolean isSetPassWord() {
    return this.PassWord != null;
  }

  public void setPassWordIsSet(boolean value) {
    if (!value) {
      this.PassWord = null;
    }
  }

  public int getScore() {
    return this.Score;
  }

  public User setScore(int Score) {
    this.Score = Score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field Score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public String getCreatedDate() {
    return this.CreatedDate;
  }

  public User setCreatedDate(String CreatedDate) {
    this.CreatedDate = CreatedDate;
    return this;
  }

  public void unsetCreatedDate() {
    this.CreatedDate = null;
  }

  /** Returns true if field CreatedDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedDate() {
    return this.CreatedDate != null;
  }

  public void setCreatedDateIsSet(boolean value) {
    if (!value) {
      this.CreatedDate = null;
    }
  }

  public String getUpdatedDate() {
    return this.UpdatedDate;
  }

  public User setUpdatedDate(String UpdatedDate) {
    this.UpdatedDate = UpdatedDate;
    return this;
  }

  public void unsetUpdatedDate() {
    this.UpdatedDate = null;
  }

  /** Returns true if field UpdatedDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedDate() {
    return this.UpdatedDate != null;
  }

  public void setUpdatedDateIsSet(boolean value) {
    if (!value) {
      this.UpdatedDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case PASS_WORD:
      if (value == null) {
        unsetPassWord();
      } else {
        setPassWord((String)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Integer)value);
      }
      break;

    case CREATED_DATE:
      if (value == null) {
        unsetCreatedDate();
      } else {
        setCreatedDate((String)value);
      }
      break;

    case UPDATED_DATE:
      if (value == null) {
        unsetUpdatedDate();
      } else {
        setUpdatedDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USER_NAME:
      return getUserName();

    case PASS_WORD:
      return getPassWord();

    case SCORE:
      return getScore();

    case CREATED_DATE:
      return getCreatedDate();

    case UPDATED_DATE:
      return getUpdatedDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_NAME:
      return isSetUserName();
    case PASS_WORD:
      return isSetPassWord();
    case SCORE:
      return isSetScore();
    case CREATED_DATE:
      return isSetCreatedDate();
    case UPDATED_DATE:
      return isSetUpdatedDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_Id = true && this.isSetId();
    boolean that_present_Id = true && that.isSetId();
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (!this.Id.equals(that.Id))
        return false;
    }

    boolean this_present_UserName = true && this.isSetUserName();
    boolean that_present_UserName = true && that.isSetUserName();
    if (this_present_UserName || that_present_UserName) {
      if (!(this_present_UserName && that_present_UserName))
        return false;
      if (!this.UserName.equals(that.UserName))
        return false;
    }

    boolean this_present_PassWord = true && this.isSetPassWord();
    boolean that_present_PassWord = true && that.isSetPassWord();
    if (this_present_PassWord || that_present_PassWord) {
      if (!(this_present_PassWord && that_present_PassWord))
        return false;
      if (!this.PassWord.equals(that.PassWord))
        return false;
    }

    boolean this_present_Score = true;
    boolean that_present_Score = true;
    if (this_present_Score || that_present_Score) {
      if (!(this_present_Score && that_present_Score))
        return false;
      if (this.Score != that.Score)
        return false;
    }

    boolean this_present_CreatedDate = true && this.isSetCreatedDate();
    boolean that_present_CreatedDate = true && that.isSetCreatedDate();
    if (this_present_CreatedDate || that_present_CreatedDate) {
      if (!(this_present_CreatedDate && that_present_CreatedDate))
        return false;
      if (!this.CreatedDate.equals(that.CreatedDate))
        return false;
    }

    boolean this_present_UpdatedDate = true && this.isSetUpdatedDate();
    boolean that_present_UpdatedDate = true && that.isSetUpdatedDate();
    if (this_present_UpdatedDate || that_present_UpdatedDate) {
      if (!(this_present_UpdatedDate && that_present_UpdatedDate))
        return false;
      if (!this.UpdatedDate.equals(that.UpdatedDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Id = true && (isSetId());
    list.add(present_Id);
    if (present_Id)
      list.add(Id);

    boolean present_UserName = true && (isSetUserName());
    list.add(present_UserName);
    if (present_UserName)
      list.add(UserName);

    boolean present_PassWord = true && (isSetPassWord());
    list.add(present_PassWord);
    if (present_PassWord)
      list.add(PassWord);

    boolean present_Score = true;
    list.add(present_Score);
    if (present_Score)
      list.add(Score);

    boolean present_CreatedDate = true && (isSetCreatedDate());
    list.add(present_CreatedDate);
    if (present_CreatedDate)
      list.add(CreatedDate);

    boolean present_UpdatedDate = true && (isSetUpdatedDate());
    list.add(present_UpdatedDate);
    if (present_UpdatedDate)
      list.add(UpdatedDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UserName, other.UserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassWord()).compareTo(other.isSetPassWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PassWord, other.PassWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Score, other.Score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedDate()).compareTo(other.isSetCreatedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CreatedDate, other.CreatedDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedDate()).compareTo(other.isSetUpdatedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UpdatedDate, other.UpdatedDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("Id:");
    if (this.Id == null) {
      sb.append("null");
    } else {
      sb.append(this.Id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UserName:");
    if (this.UserName == null) {
      sb.append("null");
    } else {
      sb.append(this.UserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PassWord:");
    if (this.PassWord == null) {
      sb.append("null");
    } else {
      sb.append(this.PassWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Score:");
    sb.append(this.Score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CreatedDate:");
    if (this.CreatedDate == null) {
      sb.append("null");
    } else {
      sb.append(this.CreatedDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UpdatedDate:");
    if (this.UpdatedDate == null) {
      sb.append("null");
    } else {
      sb.append(this.UpdatedDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.UserName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASS_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PassWord = iprot.readString();
              struct.setPassWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Score = iprot.readI32();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CreatedDate = iprot.readString();
              struct.setCreatedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.UpdatedDate = iprot.readString();
              struct.setUpdatedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.Id);
        oprot.writeFieldEnd();
      }
      if (struct.UserName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.UserName);
        oprot.writeFieldEnd();
      }
      if (struct.PassWord != null) {
        oprot.writeFieldBegin(PASS_WORD_FIELD_DESC);
        oprot.writeString(struct.PassWord);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeI32(struct.Score);
      oprot.writeFieldEnd();
      if (struct.CreatedDate != null) {
        oprot.writeFieldBegin(CREATED_DATE_FIELD_DESC);
        oprot.writeString(struct.CreatedDate);
        oprot.writeFieldEnd();
      }
      if (struct.UpdatedDate != null) {
        oprot.writeFieldBegin(UPDATED_DATE_FIELD_DESC);
        oprot.writeString(struct.UpdatedDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetPassWord()) {
        optionals.set(2);
      }
      if (struct.isSetScore()) {
        optionals.set(3);
      }
      if (struct.isSetCreatedDate()) {
        optionals.set(4);
      }
      if (struct.isSetUpdatedDate()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.Id);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.UserName);
      }
      if (struct.isSetPassWord()) {
        oprot.writeString(struct.PassWord);
      }
      if (struct.isSetScore()) {
        oprot.writeI32(struct.Score);
      }
      if (struct.isSetCreatedDate()) {
        oprot.writeString(struct.CreatedDate);
      }
      if (struct.isSetUpdatedDate()) {
        oprot.writeString(struct.UpdatedDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.Id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UserName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.PassWord = iprot.readString();
        struct.setPassWordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Score = iprot.readI32();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(4)) {
        struct.CreatedDate = iprot.readString();
        struct.setCreatedDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.UpdatedDate = iprot.readString();
        struct.setUpdatedDateIsSet(true);
      }
    }
  }

}

